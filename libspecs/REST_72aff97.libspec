<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="REST" type="library" format="ROBOT" generated="20180522 18:19:21">
<version></version>
<scope>test suite</scope>
<namedargs>yes</namedargs>
<doc>Robot Framework test library for (RESTful) JSON APIs.

RESTinstance validates JSON using JSON Schema, guiding you to write API tests
basing on constraints (e.g. "response body property email must be a valid
email") rather than on specific values (e.g. response body property email
is "foo@bar.com"). This reduces test maintenance when values returned by
the API are prone to change. Although validations do not require values,
you can still use them whenever they make sense (e.g. GET response body
from one endpoint, then POST some of its values to another endpoint).

The library generates JSON Schema for requests and responses automatically,
and the schema gets more accurate by your tests.
This schema can be used as a documentation or a contract between
different teams, or specialities (e.g. testers, developers), to agree on
what kind of data the API handles. Additionally, you can mark validations
to be skipped, and rather use the tests to define how the API should work,
if the API does not exist yet - then the produced schema also acts as a
design. The schema can be further used as a base for writing an OpenAPI
specification, which RESTinstance can also test against (spec version 2.0,
the support for 3.0, and generating also an OpenAPI spec automatically is
planned).</doc>
<init>
<arguments>
<arg>url=None</arg>
<arg>ssl_verify=True</arg>
<arg>accept=application/json, */*</arg>
<arg>content_type=application/json</arg>
<arg>user_agent=RESTinstance/1.0.0b34</arg>
<arg>proxies={}</arg>
<arg>schema={}</arg>
<arg>spec={}</arg>
<arg>instances=[]</arg>
</arguments>
<doc>Initialize self.  See help(type(self)) for accurate signature.</doc>
<tags>
</tags>
</init>
<kw name="Array">
<arguments>
<arg>field</arg>
<arg>*enum</arg>
<arg>**validations</arg>
</arguments>
<doc>Verify a returned response is an array with specific validations.

Example:
Verify the returned response is an array and has a maximum of 100 items.
If more than 100 items, fail.
| `GET`   | /users?limit=100 |                |
| `Array` | response body    | maxItems = 100 |</doc>
<tags>
</tags>
</kw>
<kw name="Boolean">
<arguments>
<arg>field</arg>
<arg>value=None</arg>
<arg>**validations</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Clear Expectations">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Delete">
<arguments>
<arg>endpoint</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc>Make a ``DELETE`` request call to a specified ``endpoint``.

Example:
DELETE user 4 from endpoint and ensure status code is 200, 202, or 204.
| `DELETE`  | /users/4        |     |     |     |
| `Integer` | response status | 200 | 202 | 204 |</doc>
<tags>
</tags>
</kw>
<kw name="Expect Request">
<arguments>
<arg>schema</arg>
<arg>replace=False</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Expect Response">
<arguments>
<arg>schema</arg>
<arg>replace=False</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Expect Spec">
<arguments>
<arg>spec</arg>
<arg>replace=False</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Get">
<arguments>
<arg>endpoint</arg>
<arg>query=None</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc>Make a ``GET`` request call to a specified ``endpoint``.

Example:
GET users from site and ensure status code is 200
| `GET`     | /users?limit=2  |     |
| `Integer` | response status | 200 |</doc>
<tags>
</tags>
</kw>
<kw name="Head">
<arguments>
<arg>endpoint</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Input">
<arguments>
<arg>what</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Integer">
<arguments>
<arg>field</arg>
<arg>*enum</arg>
<arg>**validations</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Missing">
<arguments>
<arg>field</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Null">
<arguments>
<arg>field</arg>
<arg>**validations</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Number">
<arguments>
<arg>field</arg>
<arg>*enum</arg>
<arg>**validations</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Object">
<arguments>
<arg>field</arg>
<arg>*enum</arg>
<arg>**validations</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Options">
<arguments>
<arg>endpoint</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Output">
<arguments>
<arg>what=</arg>
<arg>file_path=None</arg>
<arg>append=False</arg>
<arg>sort_keys=False</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Patch">
<arguments>
<arg>endpoint</arg>
<arg>body=None</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Post">
<arguments>
<arg>endpoint</arg>
<arg>body=None</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc>Make a ``POST`` request call to a specified ``endpoint``.

Example:
POST "Mr Potato" to endpoint and ensure status code is 201
| `POST`    | /users          | { "id": 11, "name": "Mr Potato" } |
| `Integer` | response status | 201                               |</doc>
<tags>
</tags>
</kw>
<kw name="Put">
<arguments>
<arg>endpoint</arg>
<arg>body=None</arg>
<arg>timeout=None</arg>
<arg>allow_redirects=None</arg>
<arg>validate=True</arg>
</arguments>
<doc>Make a ``PUT`` request call to a specified ``endpoint``.

Example:
PUT existing record with new name to endpoint
| `PUT`  | /users/11  | { "name": "Albus Potter" }  |</doc>
<tags>
</tags>
</kw>
<kw name="Rest Instances">
<arguments>
<arg>file_path=None</arg>
<arg>sort_keys=False</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Set Client Cert">
<arguments>
<arg>cert</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Set Headers">
<arguments>
<arg>headers</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="String">
<arguments>
<arg>field</arg>
<arg>*enum</arg>
<arg>**validations</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
</keywordspec>
